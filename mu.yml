environments:
- name: dev
  cluster:
    instanceType: m4.large
    imageId: ami-8c3667f6
    keyName: skyland-tech-access
- name: production
service:
  name: muexample
  port: 80
  healthEndpoint: /index.html
  pathPatterns:
  - /*
  pipeline:
    source:
      provider: GitHub
      repo: tmcelhattan/muexample
    acceptance:
      environment: dev
    production:
      environment: production
      disabled: true

templates:
  mu-service-muexample-dev:
    Resources:
      CloudWatchEventRole:
        Type: "AWS::IAM::Role"
        Properties: 
          AssumeRolePolicyDocument:
            "Statement": [
              {
                "Action": [
                    "sts:AssumeRole"
                ],
                "Effect": "Allow",
                "Principal": {
                    "Service": [
                        "events.amazonaws.com"
                    ]
                }
              }
            ]
      CloudWatchEventPolicy:
        Type: "AWS::IAM::Policy"
        Properties: 
          PolicyName: "ecs_scheduled_task_policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: ecs:RunTask
                Resource: "*"
          Roles: 
            - Ref: "CloudWatchEventRole"
      TargetControlEventRule: 
        Type: "AWS::Events::Rule"
        Properties: 
          Description: "Runs the spec limit rake task every 10 minutes"
          ScheduleExpression: rate(2 minutes)
          State: "ENABLED"
          Targets: 
            - Id: TargetControlEventRuleId
              RoleArn:
                Fn::GetAtt: [ CloudWatchEventRole, Arn ]
              Arn: 
                Fn::Sub:
                  - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${EcsClusterName}"
                  - EcsClusterName: 'mu-environment-dev'
              Input: '{ "containerOverrides": [ { "name": "muexample", "command": [ "echo", "Hello" ] } ] }'
              EcsParameters:
                TaskCount: 1
                TaskDefinitionArn: 
                  Ref: MicroserviceTaskDefinition
      SpecLimitEventRule: 
        Type: "AWS::Events::Rule"
        Properties: 
          Description: "Runs the spec limit rake task every 10 minutes"
          ScheduleExpression: rate(2 minutes)
          State: "ENABLED"
          Targets: 
            - Id: SpecLimitEventRuleId
              RoleArn:
                Fn::GetAtt: [ CloudWatchEventRole, Arn ]
              Arn: 
                Fn::Sub:
                  - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${EcsClusterName}"
                  - EcsClusterName: mu-environment-dev
              Input: '{ "containerOverrides": [ { "name": "muexample", "command": [ "echo", "Sample" ] } ] }'
              EcsParameters:
                TaskCount: 1
                TaskDefinitionArn: 
                  Ref: MicroserviceTaskDefinition
  # mu-loadbalancer-dev:
  #   Resources:
  #     Elb:
  #       Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
  #       Properties:
  #         LoadBalancerAttributes:
  #           - Key: access_logs.s3.enabled
  #             Value: true
  #           - Key: access_logs.s3.bucket
  #             Value:
  #               Ref: ElbLogsS3Bucket
  #           - Key: deletion_protection.enabled
  #             Value: true 
  #     ElbLogsS3Bucket:
  #       Type: "AWS::S3::Bucket"
  #       Properties: 
  #         BucketName:
  #           Fn::Sub:
  #             "${AWS::StackName}-elblogs"
  #     ElbS3BucketPolicy:
  #         Type: "AWS::S3::BucketPolicy"
  #         Properties: 
  #           Bucket: 
  #             Ref: ElbLogsS3Bucket
  #           PolicyDocument: 
  #             Statement: 
  #               - 
  #                 Action: 
  #                   - "*"
  #                 Effect: "Allow"
  #                 Resource:
  #                   Fn::Sub: ${ElbLogsS3Bucket.Arn}/*
  #                 Principal: "*"
  mu-vpc-dev:
    Resources:
      VpcFlowLogs:
        Type: "AWS::EC2::FlowLog"
        Properties:
          DeliverLogsPermissionArn:
            Fn::GetAtt: [ CloudWatchLogsRole, Arn ] 
          LogGroupName: 
            Ref: VpcCloudwatchLogGroup
          ResourceId: 
            Ref: VPC
          ResourceType: VPC
          TrafficType: ALL
      VpcCloudwatchLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties: 
          LogGroupName: 
            Fn::Sub: "${AWS::StackName}-log_group"
      CloudWatchLogsRole:
        Type: "AWS::IAM::Role"
        Properties: 
          AssumeRolePolicyDocument:
            "Statement": [
              {
                "Action": [
                    "sts:AssumeRole"
                ],
                "Effect": "Allow",
                "Principal": {
                    "Service": [
                        "logs.amazonaws.com"
                    ]
                }
              }
            ]
      CloudWatchLogsPolicy:
        Type: "AWS::IAM::Policy"
        Properties: 
          PolicyName: 
            Fn::Sub: "${AWS::StackName}-vpc_logs_policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: logs:*
                Resource: "*"
          Roles: 
            - Ref: "CloudWatchLogsRole"
      VPCPeeringConnection:
        Type: "AWS::EC2::VPCPeeringConnection"
        Properties: 
          PeerVpcId: vpc-d5451aac
          VpcId:
            Ref: VPC
      VPNRoutePropagation:
        Type: "AWS::EC2::VPNGatewayRoutePropagation"
        DependsOn: VPCGatewayAttachment
        Properties:
          RouteTableIds:
          - Ref: InstanceRouteTable
          VpnGatewayId:
            Ref: VirtualPrivateGateway
      VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
          VpcId:
            Ref: VPC
          VpnGatewayId:
            Ref: VirtualPrivateGateway
